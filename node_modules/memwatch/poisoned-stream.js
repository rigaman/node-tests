/*
  Usage:
    npm install memwatch
    node poisoned-stream.js 2> /dev/null
*/

var Stream = require('stream');
var util = require('util');
var memwatch = require('./');

function rssUsage() {
  return process.memoryUsage().rss / 1024 / 1024
}

function Streamer() {
  Stream.call(this);
  this.paused = true;
  this.readable = true;
};
util.inherits(Streamer, Stream);

Streamer.prototype.pipe = function pipe(endpoint) {
  process.nextTick(this.resume.bind(this));
  return Stream.prototype.pipe.call(this, endpoint);
};

Streamer.prototype.resume = function resume() {
  var n = 0;
  var bighd = new memwatch.HeapDiff();
  var hd = new memwatch.HeapDiff();
  var diff;
  while (n++ < 1e5) {
    if (n % 1000 === 0) {
      diff = hd.end();
      console.log('heapDiff: %s', diff.after.size);
      console.log('process.memoryUsage().rss: %d mb', rssUsage());
      hd = new memwatch.HeapDiff();
    }
    this.emit('data', 'umad?');
  }
  diff = hd.end();
  console.log('heapDiff: %s', diff.after.size);
  this.emit('end');
  this.showUsage();
  process.nextTick(function() {
    console.log("all dumb", JSON.stringify(bighd.end(), null, "  "));
  });
};

Streamer.prototype.showUsage = function showUsage() {
  // even though we force garbage collection
  setInterval(function () {
    memwatch.gc();
    console.log('process.memoryUsage().rss: %d mb', rssUsage());
  }, 1000)
};

if (!module.parent) {
  new Streamer().pipe(process.stderr);
}
